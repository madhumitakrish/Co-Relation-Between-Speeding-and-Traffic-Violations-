source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
?cv.glm()
source('~/manual_cv.R')
detach(Default)
detach(Default)
detach(Default)
source('~/manual_cv.R')
myCost <- function(r, pi=0){
mean(abs(r-pi) > 0.5)
}
source('~/manual_cv.R')
detach(Default)
detach(Default)
detach(Default)
cv.error.5$delta
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
?print()
source('~/manual_cv.R')
numFolds
source('~/manual_cv.R')
numFolds
source('~/manual_cv.R')
?nrows()
?nRows()
source('~/manual_cv.R')
numFolds
myFolds
source('~/manual_cv.R')
myFolds
source('~/manual_cv.R')
myFolds
size(N)
length(N)
length(Default)
nrow(Default)
x <- 10
y <- 20
Default[x:y]
Default[x:y,]
source('~/manual_cv.R')
detach(Default)
detach(Default)
detach(Default)
detach(Default)
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
Default[train,]
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
View(glm.fit)
source('~/manual_cv.R')
source('~/manual_cv.R')
View(cv.error.5)
source('~/manual_cv.R')
cv.error.k
source('~/manual_cv.R')
x <- 1000
y <- sample(x, x/2)
View(y)
str(y)
glm(default ~ balance + income, family=binomial, subset=y)
source('~/manual_cv.R')
train <- Default[10,]
train <- rowval:foldSize
rowval<- 10
train <- rowval:20
rm(list=ls())
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
source('~/manual_cv.R')
cv.error.k
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
cv.error.k
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
test <- glm(default ~ balance + income, family=binomial, subset=1:20)
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
?rep()
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
attach(Default)
View(Default)
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/lab6_code.R')
rm(list=ls())
library(ISLR)
library(boot)
# Name: Andrew Weathers
# Date: 5 October 2018
# Purpose: Practice using resampling methods
set.seed(42)
attach(Default)
n <- nrow(Default)
train <- sample(n, n/2)
test <- seq(n)[-train]
# 1) Validation Set
glm.fit <- glm(default ~ balance + income, family=binomial, subset=train)
pred.probs <- predict(glm.fit, Default[test,], type="response")
pred.default <- rep("No", n/2)
pred.default[pred.probs > 0.5] <- "yes"
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/lab6_code.R')
source('~/lab6_code.R')
source('~/lab6_code.R')
rm(list=ls())
library(ISLR)
library(boot)
# Name: Andrew Weathers
# Date: 5 October 2018
# Purpose: Practice using resampling methods
set.seed(42)
attach(Default)
n <- nrow(Default)
train <- sample(n, n/2)
test <- seq(n)[-train]
glm.fit <- glm(default ~ balance + income, family=binomial, subset=train)
pred.probs <- predict(glm.fit, Default[test,], type="response")
pred.default <- rep("No", n/2)
pred.default[pred.probs > 0.5] <- "yes"
table(default[test], pred.default) # Confusion matrix
error.rate <- 100*mean(pred.default != default[test])
length(pred.default)
length(default[test])
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/Career/Academics/cpsc6300/lab/manual_cv.R')
myError
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
setwd("~/Career/Academics/cpsc6300/f18-chicago-crime/Src")
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/EDA.R')
p <- ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=type)) + geom_point()
plot(p)
p <- ggplot(crash, aes(x=LONGITUDE, y=LATITUDE, col=type)) + geom_point()
plot(p)
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/models.R')
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/models.R')
library(glmnet)
set.seed(99)
lassoData <- everyCamera[,grep("ViolationCount", colnames(everyCamera))]
x <- as.matrix(lassoData[,-grep("CrashesCount", colnames(lassoData))])
y <- as.numeric(as.matrix(lassoData[,grep("CrashesCount", colnames(lassoData))]))
train<-sample(1:nrow(x), nrow(x)*.7)
y.test <- y[-train]
library(glmnet)
set.seed(99)
lassoData <- everyCamera[,grep("ViolationCount", colnames(everyCamera))]
x <- as.matrix(lassoData[,-grep("CrashesCount", colnames(lassoData))])
lassoData <- everyCamera[,grep("ViolationCount", colnames(everyCamera))]
x <- as.matrix(lassoData[,-grep("CrashesCount", colnames(lassoData))])
lassoData <- data.frame(everyCamera[,grep("ViolationCount", colnames(everyCamera))])
View(lassoData)
lassoData <- data.frame(everyCamera[,grep("ViolationCount")])
lassoData <- data.frame(everyCamera[,grep("ViolationCount", colnames("ViolationCount"))])
View(lassoData)
lassoData <- data.frame(everyCamera[,grep("ViolationCount", colnames(everyCamera))])
x <- as.matrix(everyCamera[,-grep("CrashesCount", colnames(everyCamera))])
y <- as.numeric(as.matrix(everyCamera[,grep("CrashesCount", colnames(everyCamera))]))
train<-sample(1:nrow(x), nrow(x)*.7)
y.test <- y[-train]
grid<-10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
cv.lasso <- cv.glmnet(x[train,],y[train],family="gaussian",alpha=1, standardize=FALSE)
bestlam <- cv.lasso$lambda.min
lasso.pred<-predict(lasso.mod,s=bestlam,newx=x[-train,])
lassoMSE <- mean((lasso.pred-y.test)^2) #MSE for LASSO
lassoRawError <- mean(abs(lasso.pred-y.test))
train<-sample(1:nrow(x), nrow(x)*.7)
y.test <- y[-train]
grid<-10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
cv.lasso <- cv.glmnet(x[train,],y[train],family="gaussian",alpha=1, standardize=FALSE)
x <- data.matrix(everyCamera[,-grep("CrashesCount", colnames(everyCamera))])
y <- data.numeric(as.matrix(everyCamera[,grep("CrashesCount", colnames(everyCamera))]))
x <- data.matrix(everyCamera[,-grep("CrashesCount", colnames(everyCamera))])
y <- as.numeric(data.matrix(everyCamera[,grep("CrashesCount", colnames(everyCamera))]))
train<-sample(1:nrow(x), nrow(x)*.7)
y.test <- y[-train]
grid<-10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
cv.lasso <- cv.glmnet(x[train,],y[train],family="gaussian",alpha=1, standardize=FALSE)
bestlam <- cv.lasso$lambda.min
lasso.pred<-predict(lasso.mod,s=bestlam,newx=x[-train,])
lassoMSE <- mean((lasso.pred-y.test)^2) #MSE for LASSO
lassoRawError <- mean(abs(lasso.pred-y.test))
lassoMSE
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/models.R')
perMSEImprove
index<-sample(1:nrow(everyCamera), nrow(everyCamera)*0.7)
train<-everyCamera[index,]
test<-everyCamera[-index,]
avgCrashCount <- mean(train$CrashesCount)
offset <- abs(test$CrashesCount - avgCrashCount)
# MSE for Null Model
nullMSE <- mean(offset^2)
# Mean Error
nullRawError <- mean(offset)
nullMSE
lassoMSE
perMSEImprove
nullMSE
-lassoMSE
nullMSE-lassoMSE
/nullMSE
(nullMSE-lassoMSE)
12639.89/nullMSE
*100
0.23*100
decrease <- nullMSE - lassoMSE
perMSEImprove <- (decrease / nullMSE) * 100
perMSEImprove
