source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
?cv.glm()
source('~/manual_cv.R')
detach(Default)
detach(Default)
detach(Default)
source('~/manual_cv.R')
myCost <- function(r, pi=0){
mean(abs(r-pi) > 0.5)
}
source('~/manual_cv.R')
detach(Default)
detach(Default)
detach(Default)
cv.error.5$delta
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
?print()
source('~/manual_cv.R')
numFolds
source('~/manual_cv.R')
numFolds
source('~/manual_cv.R')
?nrows()
?nRows()
source('~/manual_cv.R')
numFolds
myFolds
source('~/manual_cv.R')
myFolds
source('~/manual_cv.R')
myFolds
size(N)
length(N)
length(Default)
nrow(Default)
x <- 10
y <- 20
Default[x:y]
Default[x:y,]
source('~/manual_cv.R')
detach(Default)
detach(Default)
detach(Default)
detach(Default)
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
Default[train,]
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
View(glm.fit)
source('~/manual_cv.R')
source('~/manual_cv.R')
View(cv.error.5)
source('~/manual_cv.R')
cv.error.k
source('~/manual_cv.R')
x <- 1000
y <- sample(x, x/2)
View(y)
str(y)
glm(default ~ balance + income, family=binomial, subset=y)
source('~/manual_cv.R')
train <- Default[10,]
train <- rowval:foldSize
rowval<- 10
train <- rowval:20
rm(list=ls())
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
source('~/manual_cv.R')
cv.error.k
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
cv.error.k
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
test <- glm(default ~ balance + income, family=binomial, subset=1:20)
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
?rep()
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
attach(Default)
View(Default)
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/lab6_code.R')
rm(list=ls())
library(ISLR)
library(boot)
# Name: Andrew Weathers
# Date: 5 October 2018
# Purpose: Practice using resampling methods
set.seed(42)
attach(Default)
n <- nrow(Default)
train <- sample(n, n/2)
test <- seq(n)[-train]
# 1) Validation Set
glm.fit <- glm(default ~ balance + income, family=binomial, subset=train)
pred.probs <- predict(glm.fit, Default[test,], type="response")
pred.default <- rep("No", n/2)
pred.default[pred.probs > 0.5] <- "yes"
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/lab6_code.R')
source('~/lab6_code.R')
source('~/lab6_code.R')
rm(list=ls())
library(ISLR)
library(boot)
# Name: Andrew Weathers
# Date: 5 October 2018
# Purpose: Practice using resampling methods
set.seed(42)
attach(Default)
n <- nrow(Default)
train <- sample(n, n/2)
test <- seq(n)[-train]
glm.fit <- glm(default ~ balance + income, family=binomial, subset=train)
pred.probs <- predict(glm.fit, Default[test,], type="response")
pred.default <- rep("No", n/2)
pred.default[pred.probs > 0.5] <- "yes"
table(default[test], pred.default) # Confusion matrix
error.rate <- 100*mean(pred.default != default[test])
length(pred.default)
length(default[test])
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/Career/Academics/cpsc6300/lab/manual_cv.R')
myError
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
setwd("~/Career/Academics/cpsc6300/f18-chicago-crime/Src")
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/EDA.R')
plot(p)
View(coords)
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/EDA.R')
plot(p)
nullRawError
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/models.R')
nullRawError
lassoRawError
View(CrashesCount)
View(everyCamera)
summary(everyCamera$CrashesCount)
summary(everyCamera$CrashesCount)$Median
str(summary(everyCamera$CrashesCount))
summary(everyCamera$CrashesCount)[3]
summary(everyCamera$CrashesCount)[3][2]
summary(everyCamera$CrashesCount)[3][1]
summary(everyCamera$CrashesCount)[3][1] / 2
val <- summary(everyCamera$CrashesCount)[3][1] / 2
avgPerCrashError <- mean(abs(summary(everyCamera$CrashesCount)[3] - lasso.pred))
avgPerCrashError
lasso.pred
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/models.R')
lasso.pred
avgCrashCount
lasso.mod
lasso.pred<-predict(lasso.mod,s=bestlam,newx=x[-train,])
lasso.pred
coef(cv.lasso)
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/models.R')
everyCamera <- everyCamera[,-grep("CAMERA.ID", colnames(everyCamera))]
View(everyCamera)
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/models.R')
x <- data.matrix(everyCamera[,-grep("CrashesCount", colnames(everyCamera))])
View(x)
everyCamera <- everyCamera[,-grep("CAMERA.ID", colnames(everyCamera))]
everyCamera <- read.csv("../Data/CameraMetrics.csv")
everyCamera <- everyCamera[,-grep("CAMERA.ID", colnames(everyCamera))]
x <- data.matrix(everyCamera[,-grep("CrashesCount", colnames(everyCamera))])
y <- as.numeric(data.matrix(everyCamera[,grep("CrashesCount", colnames(everyCamera))]))
train<-sample(1:nrow(x), nrow(x)*.7)
y.test <- y[-train]
grid<-10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
cv.lasso <- cv.glmnet(x[train,],y[train],family="gaussian",alpha=1, standardize=FALSE)
bestlam <- cv.lasso$lambda.min
lasso.pred<-predict(lasso.mod,s=bestlam,newx=x[-train,])
lasso.pred
str(lasso.pred)
str(cv.lasso)
lasso.pred<-predict(lasso.mod,s=bestlam,newx=x[-train,])
# Name: Andrew Weathers
# ---------- Null model for Crash-Speed Correlation ----------
index<-sample(1:nrow(everyCamera), nrow(everyCamera)*0.7)
train<-everyCamera[index,]
test<-everyCamera[-index,]
avgCrashCount <- mean(train$CrashesCount)
offset <- abs(test$CrashesCount - avgCrashCount)
# MSE for Null Model
nullMSE <- mean(offset^2)
# Mean Error
nullRawError <- mean(offset)
# ---------- LASSO for Crash-Speed Correlation ----------
library(glmnet)
set.seed(99)
everyCamera <- read.csv("../Data/CameraMetrics.csv")
everyCamera <- everyCamera[,-grep("CAMERA.ID", colnames(everyCamera))]
x <- data.matrix(everyCamera[,-grep("CrashesCount", colnames(everyCamera))])
y <- as.numeric(data.matrix(everyCamera[,grep("CrashesCount", colnames(everyCamera))]))
train<-sample(1:nrow(x), nrow(x)*.7)
y.test <- y[-train]
grid<-10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
cv.lasso <- cv.glmnet(x[train,],y[train],family="gaussian",alpha=1, standardize=FALSE)
bestlam <- cv.lasso$lambda.min
lasso.pred<-predict(lasso.mod,s=bestlam,newx=x[-train,])
lassoMSE <- mean((lasso.pred-y.test)^2) #MSE for LASSO
lassoRawError <- mean(abs(lasso.pred-y.test))
# ---------- Quantify MSE Difference Between Models ----------
# By how much did MSE improve (%)
# Negative number means it got worse
decrease <- nullMSE - lassoMSE
perMSEImprove <- (decrease / nullMSE) * 100
avgPerCrashError <- mean(abs(summary(everyCamera$CrashesCount)[3] - lasso.pred))
avgPerCrashError <- mean(abs(summary(everyCamera$CrashesCount)[3] - lasso.pred))
avgPerCrashError
nullAvgPerCrashError <- mean(abs(summary(everyCamera$CrashesCount)[3] - avgCrashCount))
nullAvgPerCrashError
everyCamera <- read.csv("../Data/CameraMetrics.csv")
everyCamera <- everyCamera[,-grep("CAMERA.ID", colnames(everyCamera))]
x <- data.matrix(everyCamera[,-grep("CrashesCount", colnames(everyCamera))])
y <- as.numeric(data.matrix(everyCamera[,grep("CrashesCount", colnames(everyCamera))]))
train<-sample(1:nrow(x), nrow(x)*.7)
y.test <- y[-train]
grid<-10^seq(10,-2, length =100)
lasso.mod <- glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
cv.lasso <- cv.glmnet(x[train,],y[train],family="gaussian",alpha=1, standardize=FALSE)
bestlam <- cv.lasso$lambda.min
lasso.pred<-predict(lasso.mod,s=bestlam,newx=x[-train,])
lassoMSE <- mean((lasso.pred-y.test)^2) #MSE for LASSO
lassoRawError <- mean(abs(lasso.pred-y.test))
# ---------- Quantify MSE Difference Between Models ----------
# By how much did MSE improve (%)
# Negative number means it got worse
decrease <- nullMSE - lassoMSE
perMSEImprove <- (decrease / nullMSE) * 100
LassoAvgPerCrashError <- mean(abs(summary(everyCamera$CrashesCount)[3] - lasso.pred))
lasso.pred
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/models.R')
lasso.pred
perMSEImprove
lassoMSE
nullMSE
LassoAvgPerCrashError
nullAvgPerCrashError
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/EDA.R')
plot(p)
theme_bw()
# Initial Data Visualization
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(breaks = c("speed", "crash", "crash speed"),
values=c("red", "blue", "green"))+theme_bw()
plot(p)
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("red", "blue", "green"))+theme_bw()
plot(p)
# Initial Data Visualization
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("blue", "yellow", "red"))+theme_bw()
plot(p)
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("blue", "red", "yellow"))+theme_bw()
plot(p)
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("blue", "red", "green"))+theme_bw()
plot(p)
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("blue", "red", "yellow"))+theme_bw()
plot(p)
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("blue", "red", "orange"))+theme_bw()
plot(p)
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("gray", "red", "black"))+theme_bw()
plot(p)
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("gray", "red", "blue"))+theme_bw()
plot(p)
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("gray", "orange", "purple"))+theme_bw()
plot(p)
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/EDA.R')
plot(p)
p<-ggplot(coords, aes(x=LONGITUDE, y=LATITUDE, col=Type)) + geom_point()
p <- p + scale_color_manual(values=c("gray", "blue"))+theme_bw()
plot(p)
View(coords)
