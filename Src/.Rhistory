source('~/manual_cv.R')
Default[train,]
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
View(glm.fit)
source('~/manual_cv.R')
source('~/manual_cv.R')
View(cv.error.5)
source('~/manual_cv.R')
cv.error.k
source('~/manual_cv.R')
x <- 1000
y <- sample(x, x/2)
View(y)
str(y)
glm(default ~ balance + income, family=binomial, subset=y)
source('~/manual_cv.R')
train <- Default[10,]
train <- rowval:foldSize
rowval<- 10
train <- rowval:20
rm(list=ls())
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
detach(Default)
source('~/manual_cv.R')
cv.error.k
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
cv.error.k
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
test <- glm(default ~ balance + income, family=binomial, subset=1:20)
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
?rep()
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
attach(Default)
View(Default)
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/lab6_code.R')
rm(list=ls())
library(ISLR)
library(boot)
# Name: Andrew Weathers
# Date: 5 October 2018
# Purpose: Practice using resampling methods
set.seed(42)
attach(Default)
n <- nrow(Default)
train <- sample(n, n/2)
test <- seq(n)[-train]
# 1) Validation Set
glm.fit <- glm(default ~ balance + income, family=binomial, subset=train)
pred.probs <- predict(glm.fit, Default[test,], type="response")
pred.default <- rep("No", n/2)
pred.default[pred.probs > 0.5] <- "yes"
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/lab6_code.R')
source('~/lab6_code.R')
source('~/lab6_code.R')
rm(list=ls())
library(ISLR)
library(boot)
# Name: Andrew Weathers
# Date: 5 October 2018
# Purpose: Practice using resampling methods
set.seed(42)
attach(Default)
n <- nrow(Default)
train <- sample(n, n/2)
test <- seq(n)[-train]
glm.fit <- glm(default ~ balance + income, family=binomial, subset=train)
pred.probs <- predict(glm.fit, Default[test,], type="response")
pred.default <- rep("No", n/2)
pred.default[pred.probs > 0.5] <- "yes"
table(default[test], pred.default) # Confusion matrix
error.rate <- 100*mean(pred.default != default[test])
length(pred.default)
length(default[test])
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
myError
source('~/manual_cv.R')
source('~/Career/Academics/cpsc6300/lab/manual_cv.R')
myError
setwd("~/Career/Academics/cpsc6300/f18-chicago-crime/Src")
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
View(crash)
View(speed)
speed <- read.csv("../Data/Speed_Camera_Violations.csv")
crash <- read.csv("../Data/Traffic_Crashes_-_Crashes.csv")
View(crash)
View(crash)
crash <- crash[,c("POSTED_SPEED_LIMIT", "STREET_NAME", "LATITUDE", "LONGITUDE")]
speed <- speed[,c("CAMERA.ID", "LATITUDE", "LONGITUDE")]
View(crash)
speed_limits <- crash$POSTED_SPEED_LIMIT
speed_limits <- crash$POSTED_SPEED_LIMIT
rm(list=ls())
library(plyr)
# Name(s): Andrew Weathers ...
# Date: 10 October 2018
# Purpose: Aggregate traffic violations dataset with crash dataset
# by common features
# Import datasets
speed <- read.csv("../Data/Speed_Camera_Violations.csv")
crash <- read.csv("../Data/Traffic_Crashes_-_Crashes.csv")
# ---------- Data Cleaning ----------
# Strip crash of uneeded features
crash <- crash[,c("POSTED_SPEED_LIMIT", "STREET_NAME", "LATITUDE", "LONGITUDE")]
speed <- speed[,c("CAMERA.ID", "LATITUDE", "LONGITUDE")]
speed_limits <- crash$POSTED_SPEED_LIMIT
# Latitude and longitude is required
speed <- speed[!is.na(speed$LONGITUDE),]
speed <- speed[!is.na(speed$LATITUDE),]
crash <- crash[!is.na(crash$LONGITUDE),]
crash <- crash[!is.na(crash$LATITUDE),]
# Give a feature to both crash and speed called type
crash$Type <- "crash"
speed$Type <- "speed"
# Aggregate df's by unique identifiers
coords <- merge(crash, speed, by=c("LONGITUDE", "LATITUDE"), all=TRUE)
coords <- coords[, c("Type.x", "Type.y", "LONGITUDE", "LATITUDE")]
coords$Type <- paste(coords$Type.x, coords$Type.y)
# Remove NA tags
coords$Type <- gsub("NA", "", as.character(coords$Type))
coords <- coords[,c("Type", "LONGITUDE", "LATITUDE")]
# ---------- Finding Each Camera ----------
library(sqldf)
everyCamera <- sqldf('SELECT DISTINCT * FROM speed')
everyCamera$CAMERA.ID <- gsub("CHI", "", as.character(everyCamera$CAMERA.ID))
everyCamera$Type <- NULL
# Remove duplicates
everyCamera <- everyCamera[!duplicated(everyCamera$CAMERA.ID),]
everyCamera <- everyCamera[order(everyCamera$CAMERA.ID),]
# Number of violations on each Camera
violationCount <- count(speed, vars=("CAMERA.ID"))
everyCamera$ViolationCount <- violationCount$freq
# Loop function to assign a nearest speeding camera
# to every crash based on Euclidean distance.
this.distance <- 0
chosen.camera <- NULL
regions <- rep("blank", nrow(crash))
cameras <- everyCamera[,"CAMERA.ID"]
crash.long <- crash[,"LONGITUDE"]
cam.long <- everyCamera[,"LONGITUDE"]
cam.lat <- everyCamera[,"LATITUDE"]
crash.lat <- crash[,"LATITUDE"]
for(x in 1:nrow(crash)){
shortest.distance <- 10000
#Find shortest distance for given crash
for(y in 1:nrow(everyCamera)){
# Compute Euclidean distance
this.distance <- (crash.long[x] - cam.long[y])^2 + (crash.lat[x] - cam.lat[y])^2
if(this.distance < shortest.distance){
shortest.distance = this.distance
regions[x] <- cameras[y]
}
}
}
crash$regions <- regions
# Number of traffic crashes in each region
crashCount <- count(crash, vars=("regions"))
everyCamera$CrashCount <- crashCount$freq
# Write both updated speed and crash datasets to file
# Also write aggregrated crash/speed 'coords' data to file
write.csv(crash, file="../Data/Mod_Crash.csv")
write.csv(speed, file="../Data/Mod_Speed.csv")
write.csv(coords, file="../Data/Aggr_Crash_Speed.csv")
everyCamera <- everyCamera[which(everyCamera$CrashCount<1500),]
# Quick test for correlation
plot(everyCamera$ViolationCount, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speeding Violations", ylab="Crash Count")
#trying something
newCrash <- crash[,c("POSTED_SPEED_LIMIT", "regions")]
View(newCrash)
newCrash <- newCrash[,!duplicated("regions")]
View(newCrash)
newCrash <- newCrash[!duplicated("regions"),]
newCrash <- newCrash[!duplicated(newCrash$regions),]
View(newCrash)
everyCamera$Speed_Limit <- newCrash$POSTED_SPEED_LIMIT
library(sqldf)
everyCamera <- sqldf('SELECT DISTINCT * FROM speed')
everyCamera$CAMERA.ID <- gsub("CHI", "", as.character(everyCamera$CAMERA.ID))
everyCamera$Type <- NULL
# Remove duplicates
everyCamera <- everyCamera[!duplicated(everyCamera$CAMERA.ID),]
everyCamera <- everyCamera[order(everyCamera$CAMERA.ID),]
# Number of violations on each Camera
violationCount <- count(speed, vars=("CAMERA.ID"))
everyCamera$ViolationCount <- violationCount$freq
# Number of traffic crashes in each region
crashCount <- count(crash, vars=("regions"))
everyCamera$CrashCount <- crashCount$freq
#trying something
newCrash <- crash[,c("POSTED_SPEED_LIMIT", "regions")]
newCrash <- newCrash[!duplicated(newCrash$regions),]
everyCamera$Speed_Limit <- newCrash$POSTED_SPEED_LIMIT
View(everyCamera)
newCrash <- crash[,c("POSTED_SPEED_LIMIT", "regions")]
newCrash <- newCrash[!duplicated(newCrash$regions),]
newCrash <- newCrash[order(newCrash$regions),]
everyCamera$Speed_Limit <- newCrash$POSTED_SPEED_LIMIT
plot(everyCamera$Speed_Limit, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speeding Violations", ylab="Crash Count")
plot(everyCamera$Speed_Limit, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed limit", ylab="Crash Count")
plot(everyCamera$Speed_Limit, everyCamera$ViolationCount, main="Crash/Speed Correlation", xlab="Speed limit", ylab="Crash Count")
plot(everyCamera$Speed_Limit, everyCamera$ViolationCount, main="Crash/Speed Correlation", xlab="Speed limit", ylab="Speed Count")
plot(everyCamera$ViolationCount, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed violations", ylab="Crash Count")
fit <- lm(CrashCount ~ ViolationCount + Speed_Limit, data=everyCamera)
summary(fit) # show results
fit <- lm(CrashCount ~ ViolationCount, data=everyCamera)
summary(fit) # show results
fit <- lm(CrashCount ~ Speed_Limit, data=everyCamera)
summary(fit) # show results
fit <- lm(ViolationCount ~ Speed_Limit, data=everyCamera)
summary(fit) # show results
plot(everyCamera$ViolationCount, everyCamera$Speed_Limit, main="Crash/Speed Correlation", xlab="Speed violations", ylab="Crash Count")
plot(everyCamera$ViolationCount, everyCamera$Speed_Limit, main="Crash/Speed Correlation", xlab="Speed violations", ylab="limit")
fit <- lm(CrashCount ~ ViolationCount + Speed_Limit, data=everyCamera)
summary(fit) # show results
plot(everyCamera$ViolationCount, everyCamera$Speed_Limit, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed violations", ylab="limit")
plot(everyCamera$ViolationCount*everyCamera$Speed_Limit, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed violations", ylab="limit")
plot(everyCamera$ViolationCount, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed violations", ylab="limit")
this.distance <- 0
chosen.camera <- NULL
regions <- rep("blank", nrow(crash))
distances <- rep("blank", nrow(crash))
cameras <- everyCamera[,"CAMERA.ID"]
crash.long <- crash[,"LONGITUDE"]
cam.long <- everyCamera[,"LONGITUDE"]
cam.lat <- everyCamera[,"LATITUDE"]
crash.lat <- crash[,"LATITUDE"]
for(x in 1:nrow(crash)){
shortest.distance <- 10000
#Find shortest distance for given crash
for(y in 1:nrow(everyCamera)){
# Compute Euclidean distance
this.distance <- (crash.long[x] - cam.long[y])^2 + (crash.lat[x] - cam.lat[y])^2
if(this.distance < shortest.distance){
shortest.distance = this.distance
regions[x] <- cameras[y]
distances[x] <- this.distance
}
}
}
crash$regions <- regions
crash$distances <- distances
View(crash)
summary(crash$distances)
this.distance <- 0
chosen.camera <- NULL
regions <- rep("blank", nrow(crash))
nextRegion <- rep("blank", nrow(crash))
distances <- rep("blank", nrow(crash))
nextDistance <- rep("blank", nrow(crash))
cameras <- everyCamera[,"CAMERA.ID"]
crash.long <- crash[,"LONGITUDE"]
cam.long <- everyCamera[,"LONGITUDE"]
cam.lat <- everyCamera[,"LATITUDE"]
crash.lat <- crash[,"LATITUDE"]
for(x in 1:nrow(crash)){
shortest.distance <- 10000
next.shortest <- 10000
#Find shortest distance for given crash
for(y in 1:nrow(everyCamera)){
# Compute Euclidean distance
this.distance <- (crash.long[x] - cam.long[y])^2 + (crash.lat[x] - cam.lat[y])^2
if(this.distance < shortest.distance){
shortest.distance = this.distance
regions[x] <- cameras[y]
distances[x] <- this.distance
} else if(this.distance < next.shortest){
next.shortest = this.distance
nextRegion[x] <- cameras[y]
nextDistance[x] <- this.distance
}
}
}
crash$regions <- regions
crash$nextRegion <- nextRegion
crash$distances <- distances
crash$nextDistance <- nextDistance
View(crash)
crash$diff <- abs(crash$distances - crash$nextDistance)
crash$diff <- abs(as.numeric(crash$distances) - as.numeric(crash$nextDistance))
str(crash)
View(everyCamera)
summary(as.numeric(crash$diff))
worst <- rep("blank", nrow(crash))
for(x in 1:nrow(crash)){
shortest.distance <- 10000
next.shortest <- 10000
worst <- 0
#Find shortest distance for given crash
for(y in 1:nrow(everyCamera)){
# Compute Euclidean distance
this.distance <- (crash.long[x] - cam.long[y])^2 + (crash.lat[x] - cam.lat[y])^2
if(this.distance < shortest.distance){
shortest.distance = this.distance
regions[x] <- cameras[y]
distances[x] <- this.distance
} else if(this.distance < next.shortest){
next.shortest = this.distance
nextRegion[x] <- cameras[y]
nextDistance[x] <- this.distance
}
if(this.distance > worst){
worst[x] <- cameras[y]
}
}
}
# to every crash based on Euclidean distance.
this.distance <- 0
chosen.camera <- NULL
regions <- rep("blank", nrow(crash))
nextRegion <- rep("blank", nrow(crash))
distances <- rep("blank", nrow(crash))
nextDistance <- rep("blank", nrow(crash))
cameras <- everyCamera[,"CAMERA.ID"]
crash.long <- crash[,"LONGITUDE"]
cam.long <- everyCamera[,"LONGITUDE"]
cam.lat <- everyCamera[,"LATITUDE"]
crash.lat <- crash[,"LATITUDE"]
for(x in 1:nrow(crash)){
shortest.distance <- 10000
next.shortest <- 10000
worst <- 0
#Find shortest distance for given crash
for(y in 1:nrow(everyCamera)){
# Compute Euclidean distance
this.distance <- (crash.long[x] - cam.long[y])^2 + (crash.lat[x] - cam.lat[y])^2
if(this.distance < shortest.distance){
shortest.distance = this.distance
regions[x] <- cameras[y]
distances[x] <- this.distance
} else if(this.distance < next.shortest){
next.shortest = this.distance
nextRegion[x] <- cameras[y]
nextDistance[x] <- this.distance
}
}
}
crash$regions <- regions
crash$nextRegion <- nextRegion
crash$distances <- distances
crash$nextDistance <- nextDistance
View(crash)
View(speed)
summary(as.numeric(speed$LONGITUDE))
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
View(everyCamera)
plot(everyCamera$ViolationCount, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed violations", ylab="limit")
plot(everyCamera$ViolationCount, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed violations", ylab="Crash Violations")
everyCamera <- everyCamera[everyCamera$CrashCount<15000,]
plot(everyCamera$ViolationCount, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed violations", ylab="Crash Violations")
everyCamera$CrashCount <- crashCount
# ---------- Finding Each Camera ----------
library(sqldf)
everyCamera <- sqldf('SELECT DISTINCT * FROM speed')
everyCamera$CAMERA.ID <- gsub("CHI", "", as.character(everyCamera$CAMERA.ID))
everyCamera$Type <- NULL
# Remove duplicates
everyCamera <- everyCamera[!duplicated(everyCamera$CAMERA.ID),]
everyCamera <- everyCamera[order(everyCamera$CAMERA.ID),]
# Number of violations on each Camera
violationCount <- count(speed, vars=("CAMERA.ID"))
everyCamera$ViolationCount <- violationCount$freq
everyCamera$CrashCount <- crashCount
plot(everyCamera$ViolationCount, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed violations", ylab="Crash Violations")
nrow(everyCamera$CrashCount<15000)
nrow(everyCamera$CrashCount)
View(everyCamera)
nrows(everyCamera$CrashCount)
View(everyCamera$CrashCount)
size(everyCamera$CrashCount)
NROW(everyCamera$CrashCount)
NROW(everyCamera$CrashCount<15000)
NROW(which(everyCamera$CrashCount<15000))
NROW(which(everyCamera$CrashCount<150))
NROW(which(everyCamera$CrashCount<15))
test <- everyCamera[everyCamera$CrashCount<15000,]
View(test)
test <- everyCamera[everyCamera$CrashCount<1500,]
View(test)
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
plot(everyCamera$ViolationCount, everyCamera$CrashCount, main="Crash/Speed Correlation", xlab="Speed violations", ylab="Crash Violations")
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
View(crash)
summary(as.numeric(distances))
test <- everyCamera[everyCamera$distances>3,]
summary(test$distances)
View(test)
plot(crash$distances, crash$CrashCount, main="Crash/Speed Correlation", xlab="Distances", ylab="# Crashes")
plot(crash$distance, main="Crash/Speed Correlation", xlab="Distances", ylab="# Crashes")
crash$distFact <- sample(1:4)
crash$distFact <- sample(1:4, nrow(crash))
crash$distFact <- sample(nrow(crash), 1:4)
View(crash)
crash$distFact <- sample(1:4, nrow(crash), replace=TRUE)
View(crash)
summary(crash$distances)
summary(as.numeric(crash$distances))
View(everyCamera)
summary(as.numeric(everyCamera$CrashesCount))
summary(as.numeric(everyCamera$ViolationCount))
source('~/Career/Academics/cpsc6300/f18-chicago-crime/Src/pre-processing.R')
View(crash)
View(everyCamera)
plot(everyCamera$ViolationCount, everyCamera$CrashesCount, main="Crash/Speed Correlation", xlab="Distances", ylab="# Crashes")
cor(everyCamera$ViolationCount, everyCamera$CrashesCount, method = c("pearson", "kendall", "spearman"))
?cor
# Quick test for correlation
cor(everyCamera$ViolationCount, crash$POSTED_SPEED_LIMIT, method = c("pearson", "kendall", "spearman"))
cor(crash$regions, crash$POSTED_SPEED_LIMIT, method = c("pearson", "kendall", "spearman"))
cor(as.numeric(crash$regions), crash$POSTED_SPEED_LIMIT, method = c("pearson", "kendall", "spearman"))
cor(crash$distances, crash$POSTED_SPEED_LIMIT, method = c("pearson", "kendall", "spearman"))
cor(as.numeric(crash$distances), crash$POSTED_SPEED_LIMIT, method = c("pearson", "kendall", "spearman"))
cor(everyCamera$ViolationCount, everyCamera$CrashesCount, method = c("pearson", "kendall", "spearman"))
lm.fit <- lm(everyCamera$ViolationCount ~ everyCamera$CrashesCount)
lm.fit
summary(lm.fit)
